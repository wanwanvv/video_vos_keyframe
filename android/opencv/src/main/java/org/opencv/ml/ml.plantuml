@startuml

title __ML's Class Diagram__\n

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.ANN_MLP {
          {static} + ANNEAL : int
          {static} + BACKPROP : int
          {static} + GAUSSIAN : int
          {static} + IDENTITY : int
          {static} + LEAKYRELU : int
          {static} + NO_INPUT_SCALE : int
          {static} + NO_OUTPUT_SCALE : int
          {static} + RELU : int
          {static} + RPROP : int
          {static} + SIGMOID_SYM : int
          {static} + UPDATE_WEIGHTS : int
          {static} + __fromPtr__()
          {static} + create()
          + getAnnealCoolingRatio()
          + getAnnealFinalT()
          + getAnnealInitialT()
          + getAnnealItePerStep()
          + getBackpropMomentumScale()
          + getBackpropWeightScale()
          + getLayerSizes()
          + getRpropDW0()
          + getRpropDWMax()
          + getRpropDWMin()
          + getRpropDWMinus()
          + getRpropDWPlus()
          + getTermCriteria()
          + getTrainMethod()
          + getWeights()
          {static} + load()
          + setActivationFunction()
          + setActivationFunction()
          + setActivationFunction()
          + setAnnealCoolingRatio()
          + setAnnealFinalT()
          + setAnnealInitialT()
          + setAnnealItePerStep()
          + setBackpropMomentumScale()
          + setBackpropWeightScale()
          + setLayerSizes()
          + setRpropDW0()
          + setRpropDWMax()
          + setRpropDWMin()
          + setRpropDWMinus()
          + setRpropDWPlus()
          + setTermCriteria()
          + setTrainMethod()
          + setTrainMethod()
          + setTrainMethod()
          # ANN_MLP()
          # finalize()
          {static} - create_0()
          {static} - delete()
          {static} - getAnnealCoolingRatio_0()
          {static} - getAnnealFinalT_0()
          {static} - getAnnealInitialT_0()
          {static} - getAnnealItePerStep_0()
          {static} - getBackpropMomentumScale_0()
          {static} - getBackpropWeightScale_0()
          {static} - getLayerSizes_0()
          {static} - getRpropDW0_0()
          {static} - getRpropDWMax_0()
          {static} - getRpropDWMin_0()
          {static} - getRpropDWMinus_0()
          {static} - getRpropDWPlus_0()
          {static} - getTermCriteria_0()
          {static} - getTrainMethod_0()
          {static} - getWeights_0()
          {static} - load_0()
          {static} - setActivationFunction_0()
          {static} - setActivationFunction_1()
          {static} - setActivationFunction_2()
          {static} - setAnnealCoolingRatio_0()
          {static} - setAnnealFinalT_0()
          {static} - setAnnealInitialT_0()
          {static} - setAnnealItePerStep_0()
          {static} - setBackpropMomentumScale_0()
          {static} - setBackpropWeightScale_0()
          {static} - setLayerSizes_0()
          {static} - setRpropDW0_0()
          {static} - setRpropDWMax_0()
          {static} - setRpropDWMin_0()
          {static} - setRpropDWMinus_0()
          {static} - setRpropDWPlus_0()
          {static} - setTermCriteria_0()
          {static} - setTrainMethod_0()
          {static} - setTrainMethod_1()
          {static} - setTrainMethod_2()
      }
    }
  }
  

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.Boost {
          {static} + DISCRETE : int
          {static} + GENTLE : int
          {static} + LOGIT : int
          {static} + REAL : int
          {static} + __fromPtr__()
          {static} + create()
          + getBoostType()
          + getWeakCount()
          + getWeightTrimRate()
          {static} + load()
          {static} + load()
          + setBoostType()
          + setWeakCount()
          + setWeightTrimRate()
          # Boost()
          # finalize()
          {static} - create_0()
          {static} - delete()
          {static} - getBoostType_0()
          {static} - getWeakCount_0()
          {static} - getWeightTrimRate_0()
          {static} - load_0()
          {static} - load_1()
          {static} - setBoostType_0()
          {static} - setWeakCount_0()
          {static} - setWeightTrimRate_0()
      }
    }
  }
  

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.DTrees {
          {static} + PREDICT_AUTO : int
          {static} + PREDICT_MASK : int
          {static} + PREDICT_MAX_VOTE : int
          {static} + PREDICT_SUM : int
          {static} + __fromPtr__()
          {static} + create()
          + getCVFolds()
          + getMaxCategories()
          + getMaxDepth()
          + getMinSampleCount()
          + getPriors()
          + getRegressionAccuracy()
          + getTruncatePrunedTree()
          + getUse1SERule()
          + getUseSurrogates()
          {static} + load()
          {static} + load()
          + setCVFolds()
          + setMaxCategories()
          + setMaxDepth()
          + setMinSampleCount()
          + setPriors()
          + setRegressionAccuracy()
          + setTruncatePrunedTree()
          + setUse1SERule()
          + setUseSurrogates()
          # DTrees()
          # finalize()
          {static} - create_0()
          {static} - delete()
          {static} - getCVFolds_0()
          {static} - getMaxCategories_0()
          {static} - getMaxDepth_0()
          {static} - getMinSampleCount_0()
          {static} - getPriors_0()
          {static} - getRegressionAccuracy_0()
          {static} - getTruncatePrunedTree_0()
          {static} - getUse1SERule_0()
          {static} - getUseSurrogates_0()
          {static} - load_0()
          {static} - load_1()
          {static} - setCVFolds_0()
          {static} - setMaxCategories_0()
          {static} - setMaxDepth_0()
          {static} - setMinSampleCount_0()
          {static} - setPriors_0()
          {static} - setRegressionAccuracy_0()
          {static} - setTruncatePrunedTree_0()
          {static} - setUse1SERule_0()
          {static} - setUseSurrogates_0()
      }
    }
  }
  

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.EM {
          {static} + COV_MAT_DEFAULT : int
          {static} + COV_MAT_DIAGONAL : int
          {static} + COV_MAT_GENERIC : int
          {static} + COV_MAT_SPHERICAL : int
          {static} + DEFAULT_MAX_ITERS : int
          {static} + DEFAULT_NCLUSTERS : int
          {static} + START_AUTO_STEP : int
          {static} + START_E_STEP : int
          {static} + START_M_STEP : int
          {static} + __fromPtr__()
          {static} + create()
          + getClustersNumber()
          + getCovarianceMatrixType()
          + getCovs()
          + getMeans()
          + getTermCriteria()
          + getWeights()
          {static} + load()
          {static} + load()
          + predict()
          + predict()
          + predict()
          + predict2()
          + setClustersNumber()
          + setCovarianceMatrixType()
          + setTermCriteria()
          + trainE()
          + trainE()
          + trainE()
          + trainE()
          + trainE()
          + trainE()
          + trainEM()
          + trainEM()
          + trainEM()
          + trainEM()
          + trainM()
          + trainM()
          + trainM()
          + trainM()
          # EM()
          # finalize()
          {static} - create_0()
          {static} - delete()
          {static} - getClustersNumber_0()
          {static} - getCovarianceMatrixType_0()
          {static} - getCovs_0()
          {static} - getMeans_0()
          {static} - getTermCriteria_0()
          {static} - getWeights_0()
          {static} - load_0()
          {static} - load_1()
          {static} - predict2_0()
          {static} - predict_0()
          {static} - predict_1()
          {static} - predict_2()
          {static} - setClustersNumber_0()
          {static} - setCovarianceMatrixType_0()
          {static} - setTermCriteria_0()
          {static} - trainEM_0()
          {static} - trainEM_1()
          {static} - trainEM_2()
          {static} - trainEM_3()
          {static} - trainE_0()
          {static} - trainE_1()
          {static} - trainE_2()
          {static} - trainE_3()
          {static} - trainE_4()
          {static} - trainE_5()
          {static} - trainM_0()
          {static} - trainM_1()
          {static} - trainM_2()
          {static} - trainM_3()
      }
    }
  }
  

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.KNearest {
          {static} + BRUTE_FORCE : int
          {static} + KDTREE : int
          {static} + __fromPtr__()
          {static} + create()
          + findNearest()
          + findNearest()
          + findNearest()
          + getAlgorithmType()
          + getDefaultK()
          + getEmax()
          + getIsClassifier()
          {static} + load()
          + setAlgorithmType()
          + setDefaultK()
          + setEmax()
          + setIsClassifier()
          # KNearest()
          # finalize()
          {static} - create_0()
          {static} - delete()
          {static} - findNearest_0()
          {static} - findNearest_1()
          {static} - findNearest_2()
          {static} - getAlgorithmType_0()
          {static} - getDefaultK_0()
          {static} - getEmax_0()
          {static} - getIsClassifier_0()
          {static} - load_0()
          {static} - setAlgorithmType_0()
          {static} - setDefaultK_0()
          {static} - setEmax_0()
          {static} - setIsClassifier_0()
      }
    }
  }
  

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.LogisticRegression {
          {static} + BATCH : int
          {static} + MINI_BATCH : int
          {static} + REG_DISABLE : int
          {static} + REG_L1 : int
          {static} + REG_L2 : int
          {static} + __fromPtr__()
          {static} + create()
          + getIterations()
          + getLearningRate()
          + getMiniBatchSize()
          + getRegularization()
          + getTermCriteria()
          + getTrainMethod()
          + get_learnt_thetas()
          {static} + load()
          {static} + load()
          + predict()
          + predict()
          + predict()
          + setIterations()
          + setLearningRate()
          + setMiniBatchSize()
          + setRegularization()
          + setTermCriteria()
          + setTrainMethod()
          # LogisticRegression()
          # finalize()
          {static} - create_0()
          {static} - delete()
          {static} - getIterations_0()
          {static} - getLearningRate_0()
          {static} - getMiniBatchSize_0()
          {static} - getRegularization_0()
          {static} - getTermCriteria_0()
          {static} - getTrainMethod_0()
          {static} - get_learnt_thetas_0()
          {static} - load_0()
          {static} - load_1()
          {static} - predict_0()
          {static} - predict_1()
          {static} - predict_2()
          {static} - setIterations_0()
          {static} - setLearningRate_0()
          {static} - setMiniBatchSize_0()
          {static} - setRegularization_0()
          {static} - setTermCriteria_0()
          {static} - setTrainMethod_0()
      }
    }
  }
  

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.Ml {
          {static} + COL_SAMPLE : int
          {static} + ROW_SAMPLE : int
          {static} + TEST_ERROR : int
          {static} + TRAIN_ERROR : int
          {static} + VAR_CATEGORICAL : int
          {static} + VAR_NUMERICAL : int
          {static} + VAR_ORDERED : int
      }
    }
  }
  

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.NormalBayesClassifier {
          {static} + __fromPtr__()
          {static} + create()
          {static} + load()
          {static} + load()
          + predictProb()
          + predictProb()
          # NormalBayesClassifier()
          # finalize()
          {static} - create_0()
          {static} - delete()
          {static} - load_0()
          {static} - load_1()
          {static} - predictProb_0()
          {static} - predictProb_1()
      }
    }
  }
  

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.ParamGrid {
          # nativeObj : long
          {static} + __fromPtr__()
          {static} + create()
          {static} + create()
          {static} + create()
          {static} + create()
          + getNativeObjAddr()
          + get_logStep()
          + get_maxVal()
          + get_minVal()
          + set_logStep()
          + set_maxVal()
          + set_minVal()
          # ParamGrid()
          # finalize()
          {static} - create_0()
          {static} - create_1()
          {static} - create_2()
          {static} - create_3()
          {static} - delete()
          {static} - get_logStep_0()
          {static} - get_maxVal_0()
          {static} - get_minVal_0()
          {static} - set_logStep_0()
          {static} - set_maxVal_0()
          {static} - set_minVal_0()
      }
    }
  }
  

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.RTrees {
          {static} + __fromPtr__()
          {static} + create()
          + getActiveVarCount()
          + getCalculateVarImportance()
          + getTermCriteria()
          + getVarImportance()
          + getVotes()
          {static} + load()
          {static} + load()
          + setActiveVarCount()
          + setCalculateVarImportance()
          + setTermCriteria()
          # RTrees()
          # finalize()
          {static} - create_0()
          {static} - delete()
          {static} - getActiveVarCount_0()
          {static} - getCalculateVarImportance_0()
          {static} - getTermCriteria_0()
          {static} - getVarImportance_0()
          {static} - getVotes_0()
          {static} - load_0()
          {static} - load_1()
          {static} - setActiveVarCount_0()
          {static} - setCalculateVarImportance_0()
          {static} - setTermCriteria_0()
      }
    }
  }
  

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.SVM {
          {static} + C : int
          {static} + CHI2 : int
          {static} + COEF : int
          {static} + CUSTOM : int
          {static} + C_SVC : int
          {static} + DEGREE : int
          {static} + EPS_SVR : int
          {static} + GAMMA : int
          {static} + INTER : int
          {static} + LINEAR : int
          {static} + NU : int
          {static} + NU_SVC : int
          {static} + NU_SVR : int
          {static} + ONE_CLASS : int
          {static} + P : int
          {static} + POLY : int
          {static} + RBF : int
          {static} + SIGMOID : int
          {static} + __fromPtr__()
          {static} + create()
          + getC()
          + getClassWeights()
          + getCoef0()
          + getDecisionFunction()
          {static} + getDefaultGridPtr()
          + getDegree()
          + getGamma()
          + getKernelType()
          + getNu()
          + getP()
          + getSupportVectors()
          + getTermCriteria()
          + getType()
          + getUncompressedSupportVectors()
          {static} + load()
          + setC()
          + setClassWeights()
          + setCoef0()
          + setDegree()
          + setGamma()
          + setKernel()
          + setNu()
          + setP()
          + setTermCriteria()
          + setType()
          + trainAuto()
          + trainAuto()
          + trainAuto()
          + trainAuto()
          + trainAuto()
          + trainAuto()
          + trainAuto()
          + trainAuto()
          + trainAuto()
          # SVM()
          # finalize()
          {static} - create_0()
          {static} - delete()
          {static} - getC_0()
          {static} - getClassWeights_0()
          {static} - getCoef0_0()
          {static} - getDecisionFunction_0()
          {static} - getDefaultGridPtr_0()
          {static} - getDegree_0()
          {static} - getGamma_0()
          {static} - getKernelType_0()
          {static} - getNu_0()
          {static} - getP_0()
          {static} - getSupportVectors_0()
          {static} - getTermCriteria_0()
          {static} - getType_0()
          {static} - getUncompressedSupportVectors_0()
          {static} - load_0()
          {static} - setC_0()
          {static} - setClassWeights_0()
          {static} - setCoef0_0()
          {static} - setDegree_0()
          {static} - setGamma_0()
          {static} - setKernel_0()
          {static} - setNu_0()
          {static} - setP_0()
          {static} - setTermCriteria_0()
          {static} - setType_0()
          {static} - trainAuto_0()
          {static} - trainAuto_1()
          {static} - trainAuto_2()
          {static} - trainAuto_3()
          {static} - trainAuto_4()
          {static} - trainAuto_5()
          {static} - trainAuto_6()
          {static} - trainAuto_7()
          {static} - trainAuto_8()
      }
    }
  }
  

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.SVMSGD {
          {static} + ASGD : int
          {static} + HARD_MARGIN : int
          {static} + SGD : int
          {static} + SOFT_MARGIN : int
          {static} + __fromPtr__()
          {static} + create()
          + getInitialStepSize()
          + getMarginRegularization()
          + getMarginType()
          + getShift()
          + getStepDecreasingPower()
          + getSvmsgdType()
          + getTermCriteria()
          + getWeights()
          {static} + load()
          {static} + load()
          + setInitialStepSize()
          + setMarginRegularization()
          + setMarginType()
          + setOptimalParameters()
          + setOptimalParameters()
          + setOptimalParameters()
          + setStepDecreasingPower()
          + setSvmsgdType()
          + setTermCriteria()
          # SVMSGD()
          # finalize()
          {static} - create_0()
          {static} - delete()
          {static} - getInitialStepSize_0()
          {static} - getMarginRegularization_0()
          {static} - getMarginType_0()
          {static} - getShift_0()
          {static} - getStepDecreasingPower_0()
          {static} - getSvmsgdType_0()
          {static} - getTermCriteria_0()
          {static} - getWeights_0()
          {static} - load_0()
          {static} - load_1()
          {static} - setInitialStepSize_0()
          {static} - setMarginRegularization_0()
          {static} - setMarginType_0()
          {static} - setOptimalParameters_0()
          {static} - setOptimalParameters_1()
          {static} - setOptimalParameters_2()
          {static} - setStepDecreasingPower_0()
          {static} - setSvmsgdType_0()
          {static} - setTermCriteria_0()
      }
    }
  }
  

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.StatModel {
          {static} + COMPRESSED_INPUT : int
          {static} + PREPROCESSED_INPUT : int
          {static} + RAW_OUTPUT : int
          {static} + UPDATE_MODEL : int
          {static} + __fromPtr__()
          + calcError()
          + empty()
          + getVarCount()
          + isClassifier()
          + isTrained()
          + predict()
          + predict()
          + predict()
          + train()
          + train()
          + train()
          # StatModel()
          # finalize()
          {static} - calcError_0()
          {static} - delete()
          {static} - empty_0()
          {static} - getVarCount_0()
          {static} - isClassifier_0()
          {static} - isTrained_0()
          {static} - predict_0()
          {static} - predict_1()
          {static} - predict_2()
          {static} - train_0()
          {static} - train_1()
          {static} - train_2()
      }
    }
  }
  

  namespace org.opencv {
    namespace ml {
      class org.opencv.ml.TrainData {
          # nativeObj : long
          {static} + __fromPtr__()
          {static} + create()
          {static} + create()
          {static} + create()
          {static} + create()
          {static} + create()
          + getCatCount()
          + getCatMap()
          + getCatOfs()
          + getClassLabels()
          + getDefaultSubstValues()
          + getLayout()
          + getMissing()
          + getNAllVars()
          + getNSamples()
          + getNTestSamples()
          + getNTrainSamples()
          + getNVars()
          + getNames()
          + getNativeObjAddr()
          + getNormCatResponses()
          + getResponseType()
          + getResponses()
          + getSample()
          + getSampleWeights()
          + getSamples()
          {static} + getSubMatrix()
          {static} + getSubVector()
          + getTestNormCatResponses()
          + getTestResponses()
          + getTestSampleIdx()
          + getTestSampleWeights()
          + getTestSamples()
          + getTrainNormCatResponses()
          + getTrainResponses()
          + getTrainSampleIdx()
          + getTrainSampleWeights()
          + getTrainSamples()
          + getTrainSamples()
          + getTrainSamples()
          + getTrainSamples()
          + getValues()
          + getVarIdx()
          + getVarSymbolFlags()
          + getVarType()
          + setTrainTestSplit()
          + setTrainTestSplit()
          + setTrainTestSplitRatio()
          + setTrainTestSplitRatio()
          + shuffleTrainTest()
          # TrainData()
          # finalize()
          {static} - create_0()
          {static} - create_1()
          {static} - create_2()
          {static} - create_3()
          {static} - create_4()
          {static} - delete()
          {static} - getCatCount_0()
          {static} - getCatMap_0()
          {static} - getCatOfs_0()
          {static} - getClassLabels_0()
          {static} - getDefaultSubstValues_0()
          {static} - getLayout_0()
          {static} - getMissing_0()
          {static} - getNAllVars_0()
          {static} - getNSamples_0()
          {static} - getNTestSamples_0()
          {static} - getNTrainSamples_0()
          {static} - getNVars_0()
          {static} - getNames_0()
          {static} - getNormCatResponses_0()
          {static} - getResponseType_0()
          {static} - getResponses_0()
          {static} - getSampleWeights_0()
          {static} - getSample_0()
          {static} - getSamples_0()
          {static} - getSubMatrix_0()
          {static} - getSubVector_0()
          {static} - getTestNormCatResponses_0()
          {static} - getTestResponses_0()
          {static} - getTestSampleIdx_0()
          {static} - getTestSampleWeights_0()
          {static} - getTestSamples_0()
          {static} - getTrainNormCatResponses_0()
          {static} - getTrainResponses_0()
          {static} - getTrainSampleIdx_0()
          {static} - getTrainSampleWeights_0()
          {static} - getTrainSamples_0()
          {static} - getTrainSamples_1()
          {static} - getTrainSamples_2()
          {static} - getTrainSamples_3()
          {static} - getValues_0()
          {static} - getVarIdx_0()
          {static} - getVarSymbolFlags_0()
          {static} - getVarType_0()
          {static} - setTrainTestSplitRatio_0()
          {static} - setTrainTestSplitRatio_1()
          {static} - setTrainTestSplit_0()
          {static} - setTrainTestSplit_1()
          {static} - shuffleTrainTest_0()
      }
    }
  }
  

  org.opencv.ml.ANN_MLP -up-|> org.opencv.ml.StatModel
  org.opencv.ml.Boost -up-|> org.opencv.ml.DTrees
  org.opencv.ml.DTrees -up-|> org.opencv.ml.StatModel
  org.opencv.ml.EM -up-|> org.opencv.ml.StatModel
  org.opencv.ml.KNearest -up-|> org.opencv.ml.StatModel
  org.opencv.ml.LogisticRegression -up-|> org.opencv.ml.StatModel
  org.opencv.ml.NormalBayesClassifier -up-|> org.opencv.ml.StatModel
  org.opencv.ml.RTrees -up-|> org.opencv.ml.DTrees
  org.opencv.ml.SVM -up-|> org.opencv.ml.StatModel
  org.opencv.ml.SVMSGD -up-|> org.opencv.ml.StatModel
  org.opencv.ml.StatModel -up-|> org.opencv.core.Algorithm


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
